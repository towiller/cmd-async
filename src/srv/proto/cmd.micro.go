// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: srv/proto/cmd.proto

/*
Package cmd_async_srv is a generated protocol buffer package.

It is generated from these files:
	srv/proto/cmd.proto

It has these top-level messages:
	CallRequest
	CallResponse
	TypeString
	TypeBool
	TypeInt64
	TypeUint64
	TypeSint64
	TypeSint32
	TypeInt32
	TypeUint32
	TypeDouble
	TypeFloat
	TypeFixed32
	TypeFixed64
	TypeSfixed32
	TypeSfixed64
	TypeBytes
*/
package cmd_async_srv

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/golang/protobuf/ptypes/any"

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Call service

type CallService interface {
	Action(ctx context.Context, in *CallRequest, opts ...client.CallOption) (*CallResponse, error)
}

type callService struct {
	c    client.Client
	name string
}

func NewCallService(name string, c client.Client) CallService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "cmd.async.srv"
	}
	return &callService{
		c:    c,
		name: name,
	}
}

func (c *callService) Action(ctx context.Context, in *CallRequest, opts ...client.CallOption) (*CallResponse, error) {
	req := c.c.NewRequest(c.name, "Call.Action", in)
	out := new(CallResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Call service

type CallHandler interface {
	Action(context.Context, *CallRequest, *CallResponse) error
}

func RegisterCallHandler(s server.Server, hdlr CallHandler, opts ...server.HandlerOption) error {
	type call interface {
		Action(ctx context.Context, in *CallRequest, out *CallResponse) error
	}
	type Call struct {
		call
	}
	h := &callHandler{hdlr}
	return s.Handle(s.NewHandler(&Call{h}, opts...))
}

type callHandler struct {
	CallHandler
}

func (h *callHandler) Action(ctx context.Context, in *CallRequest, out *CallResponse) error {
	return h.CallHandler.Action(ctx, in, out)
}
